// Mocks generated by Mockito 5.4.2 from annotations
// in reaxit/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reaxit/api/api_repository.dart' as _i5;
import 'package:reaxit/blocs/auth_cubit.dart' as _i2;
import 'package:reaxit/config.dart' as _i3;
import 'package:reaxit/models.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_1 extends _i1.SmartFake implements _i3.Config {
  _FakeConfig_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResponse_3<T> extends _i1.SmartFake
    implements _i4.ListResponse<T> {
  _FakeListResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAlbum_13 extends _i1.SmartFake implements _i4.Album {
  _FakeAlbum_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i2.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AuthState);
  @override
  _i8.Stream<_i2.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i2.AuthState>.empty(),
      ) as _i8.Stream<_i2.AuthState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i8.Future<void> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> logIn(_i2.Environment? environment) => (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [environment],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void selectEnvironment(_i2.Environment? environment) => super.noSuchMethod(
        Invocation.method(
          #selectEnvironment,
          [environment],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i9.Change<_i2.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ApiRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepository extends _i1.Mock implements _i5.ApiRepository {
  MockApiRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_1(
          this,
          Invocation.getter(#config),
        ),
      ) as _i3.Config);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> cancelRegistration({
    required int? eventPk,
    required int? registrationPk,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelRegistration,
          [],
          {
            #eventPk: eventPk,
            #registrationPk: registrationPk,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> markPresentEventRegistration({
    required int? eventPk,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markPresentEventRegistration,
          [],
          {
            #eventPk: eventPk,
            #token: token,
          },
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> updateAvatar(String? file) => (super.noSuchMethod(
        Invocation.method(
          #updateAvatar,
          [file],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> updateDescription(String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDescription,
          [description],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i4.Album> getAlbum({required String? slug}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbum,
          [],
          {#slug: slug},
        ),
        returnValue: _i8.Future<_i4.Album>.value(_FakeAlbum_13(
          this,
          Invocation.method(
            #getAlbum,
            [],
            {#slug: slug},
          ),
        )),
      ) as _i8.Future<_i4.Album>);
  @override
  _i8.Future<void> updateLiked(
    int? id,
    bool? liked,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLiked,
          [
            id,
            liked,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i4.ListResponse<_i4.ListAlbum>> getAlbums({
    String? search,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlbums,
          [],
          {
            #search: search,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i8.Future<_i4.ListResponse<_i4.ListAlbum>>.value(
            _FakeListResponse_3<_i4.ListAlbum>(
          this,
          Invocation.method(
            #getAlbums,
            [],
            {
              #search: search,
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i8.Future<_i4.ListResponse<_i4.ListAlbum>>);
}
